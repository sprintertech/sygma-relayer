// Code generated by MockGen. DO NOT EDIT.
// Source: ./tss/keygen/keygen.go

// Package mock_keygen is a generated GoMock package.
package mock_keygen

import (
	reflect "reflect"

	keyshare "github.com/ChainSafe/sygma-relayer/keyshare"
	gomock "github.com/golang/mock/gomock"
)

// MockSaveDataStorer is a mock of SaveDataStorer interface.
type MockSaveDataStorer struct {
	ctrl     *gomock.Controller
	recorder *MockSaveDataStorerMockRecorder
}

// MockSaveDataStorerMockRecorder is the mock recorder for MockSaveDataStorer.
type MockSaveDataStorerMockRecorder struct {
	mock *MockSaveDataStorer
}

// NewMockSaveDataStorer creates a new mock instance.
func NewMockSaveDataStorer(ctrl *gomock.Controller) *MockSaveDataStorer {
	mock := &MockSaveDataStorer{ctrl: ctrl}
	mock.recorder = &MockSaveDataStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaveDataStorer) EXPECT() *MockSaveDataStorerMockRecorder {
	return m.recorder
}

// GetKeyshare mocks base method.
func (m *MockSaveDataStorer) GetKeyshare() (keyshare.Keyshare, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyshare")
	ret0, _ := ret[0].(keyshare.Keyshare)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyshare indicates an expected call of GetKeyshare.
func (mr *MockSaveDataStorerMockRecorder) GetKeyshare() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyshare", reflect.TypeOf((*MockSaveDataStorer)(nil).GetKeyshare))
}

// LockKeyshare mocks base method.
func (m *MockSaveDataStorer) LockKeyshare() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LockKeyshare")
}

// LockKeyshare indicates an expected call of LockKeyshare.
func (mr *MockSaveDataStorerMockRecorder) LockKeyshare() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockKeyshare", reflect.TypeOf((*MockSaveDataStorer)(nil).LockKeyshare))
}

// StoreKeyshare mocks base method.
func (m *MockSaveDataStorer) StoreKeyshare(keyshare keyshare.Keyshare) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreKeyshare", keyshare)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreKeyshare indicates an expected call of StoreKeyshare.
func (mr *MockSaveDataStorerMockRecorder) StoreKeyshare(keyshare interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreKeyshare", reflect.TypeOf((*MockSaveDataStorer)(nil).StoreKeyshare), keyshare)
}

// UnlockKeyshare mocks base method.
func (m *MockSaveDataStorer) UnlockKeyshare() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnlockKeyshare")
}

// UnlockKeyshare indicates an expected call of UnlockKeyshare.
func (mr *MockSaveDataStorerMockRecorder) UnlockKeyshare() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockKeyshare", reflect.TypeOf((*MockSaveDataStorer)(nil).UnlockKeyshare))
}
