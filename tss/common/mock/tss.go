// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/binance-chain/tss-lib/tss (interfaces: Message)

// Package mock_tss is a generated GoMock package.
package mock_tss

import (
	big "math/big"
	reflect "reflect"

	tss "github.com/binance-chain/tss-lib/tss"
	gomock "github.com/golang/mock/gomock"
)

// MockMessage is a mock of Message interface.
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage.
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance.
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// GetFrom mocks base method.
func (m *MockMessage) GetFrom() *tss.PartyID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrom")
	ret0, _ := ret[0].(*tss.PartyID)
	return ret0
}

// GetFrom indicates an expected call of GetFrom.
func (mr *MockMessageMockRecorder) GetFrom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrom", reflect.TypeOf((*MockMessage)(nil).GetFrom))
}

// GetSessionId mocks base method.
func (m *MockMessage) GetSessionId() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionId")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetSessionId indicates an expected call of GetSessionId.
func (mr *MockMessageMockRecorder) GetSessionId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionId", reflect.TypeOf((*MockMessage)(nil).GetSessionId))
}

// GetTo mocks base method.
func (m *MockMessage) GetTo() []*tss.PartyID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTo")
	ret0, _ := ret[0].([]*tss.PartyID)
	return ret0
}

// GetTo indicates an expected call of GetTo.
func (mr *MockMessageMockRecorder) GetTo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTo", reflect.TypeOf((*MockMessage)(nil).GetTo))
}

// IsBroadcast mocks base method.
func (m *MockMessage) IsBroadcast() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBroadcast")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBroadcast indicates an expected call of IsBroadcast.
func (mr *MockMessageMockRecorder) IsBroadcast() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBroadcast", reflect.TypeOf((*MockMessage)(nil).IsBroadcast))
}

// IsToOldAndNewCommittees mocks base method.
func (m *MockMessage) IsToOldAndNewCommittees() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsToOldAndNewCommittees")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsToOldAndNewCommittees indicates an expected call of IsToOldAndNewCommittees.
func (mr *MockMessageMockRecorder) IsToOldAndNewCommittees() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsToOldAndNewCommittees", reflect.TypeOf((*MockMessage)(nil).IsToOldAndNewCommittees))
}

// IsToOldCommittee mocks base method.
func (m *MockMessage) IsToOldCommittee() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsToOldCommittee")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsToOldCommittee indicates an expected call of IsToOldCommittee.
func (mr *MockMessageMockRecorder) IsToOldCommittee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsToOldCommittee", reflect.TypeOf((*MockMessage)(nil).IsToOldCommittee))
}

// String mocks base method.
func (m *MockMessage) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockMessageMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockMessage)(nil).String))
}

// Type mocks base method.
func (m *MockMessage) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockMessageMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockMessage)(nil).Type))
}

// WireBytes mocks base method.
func (m *MockMessage) WireBytes() ([]byte, *tss.MessageRouting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WireBytes")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*tss.MessageRouting)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WireBytes indicates an expected call of WireBytes.
func (mr *MockMessageMockRecorder) WireBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WireBytes", reflect.TypeOf((*MockMessage)(nil).WireBytes))
}

// WireMsg mocks base method.
func (m *MockMessage) WireMsg() *tss.MessageWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WireMsg")
	ret0, _ := ret[0].(*tss.MessageWrapper)
	return ret0
}

// WireMsg indicates an expected call of WireMsg.
func (mr *MockMessageMockRecorder) WireMsg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WireMsg", reflect.TypeOf((*MockMessage)(nil).WireMsg))
}
