// Code generated by MockGen. DO NOT EDIT.
// Source: ./chains/btc/listener/listener.go

// Package mock_listener is a generated GoMock package.
package mock_listener

import (
	big "math/big"
	reflect "reflect"

	btcjson "github.com/btcsuite/btcd/btcjson"
	chainhash "github.com/btcsuite/btcd/chaincfg/chainhash"
	gomock "github.com/golang/mock/gomock"
)

// MockEventHandler is a mock of EventHandler interface.
type MockEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler.
type MockEventHandlerMockRecorder struct {
	mock *MockEventHandler
}

// NewMockEventHandler creates a new mock instance.
func NewMockEventHandler(ctrl *gomock.Controller) *MockEventHandler {
	mock := &MockEventHandler{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventHandler) EXPECT() *MockEventHandlerMockRecorder {
	return m.recorder
}

// HandleEvents mocks base method.
func (m *MockEventHandler) HandleEvents(startBlock *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleEvents", startBlock)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleEvents indicates an expected call of HandleEvents.
func (mr *MockEventHandlerMockRecorder) HandleEvents(startBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvents", reflect.TypeOf((*MockEventHandler)(nil).HandleEvents), startBlock)
}

// MockBlockStorer is a mock of BlockStorer interface.
type MockBlockStorer struct {
	ctrl     *gomock.Controller
	recorder *MockBlockStorerMockRecorder
}

// MockBlockStorerMockRecorder is the mock recorder for MockBlockStorer.
type MockBlockStorerMockRecorder struct {
	mock *MockBlockStorer
}

// NewMockBlockStorer creates a new mock instance.
func NewMockBlockStorer(ctrl *gomock.Controller) *MockBlockStorer {
	mock := &MockBlockStorer{ctrl: ctrl}
	mock.recorder = &MockBlockStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockStorer) EXPECT() *MockBlockStorerMockRecorder {
	return m.recorder
}

// StoreBlock mocks base method.
func (m *MockBlockStorer) StoreBlock(block *big.Int, domainID uint8) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBlock", block, domainID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreBlock indicates an expected call of StoreBlock.
func (mr *MockBlockStorerMockRecorder) StoreBlock(block, domainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBlock", reflect.TypeOf((*MockBlockStorer)(nil).StoreBlock), block, domainID)
}

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// GetBestBlockHash mocks base method.
func (m *MockConnection) GetBestBlockHash() (*chainhash.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBestBlockHash")
	ret0, _ := ret[0].(*chainhash.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBestBlockHash indicates an expected call of GetBestBlockHash.
func (mr *MockConnectionMockRecorder) GetBestBlockHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBestBlockHash", reflect.TypeOf((*MockConnection)(nil).GetBestBlockHash))
}

// GetBlockHash mocks base method.
func (m *MockConnection) GetBlockHash(arg0 int64) (*chainhash.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHash", arg0)
	ret0, _ := ret[0].(*chainhash.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHash indicates an expected call of GetBlockHash.
func (mr *MockConnectionMockRecorder) GetBlockHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHash", reflect.TypeOf((*MockConnection)(nil).GetBlockHash), arg0)
}

// GetBlockVerboseTx mocks base method.
func (m *MockConnection) GetBlockVerboseTx(arg0 *chainhash.Hash) (*btcjson.GetBlockVerboseTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockVerboseTx", arg0)
	ret0, _ := ret[0].(*btcjson.GetBlockVerboseTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockVerboseTx indicates an expected call of GetBlockVerboseTx.
func (mr *MockConnectionMockRecorder) GetBlockVerboseTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockVerboseTx", reflect.TypeOf((*MockConnection)(nil).GetBlockVerboseTx), arg0)
}

// GetRawTransactionVerbose mocks base method.
func (m *MockConnection) GetRawTransactionVerbose(arg0 *chainhash.Hash) (*btcjson.TxRawResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawTransactionVerbose", arg0)
	ret0, _ := ret[0].(*btcjson.TxRawResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransactionVerbose indicates an expected call of GetRawTransactionVerbose.
func (mr *MockConnectionMockRecorder) GetRawTransactionVerbose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransactionVerbose", reflect.TypeOf((*MockConnection)(nil).GetRawTransactionVerbose), arg0)
}
