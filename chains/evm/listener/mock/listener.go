// Code generated by MockGen. DO NOT EDIT.
// Source: ./chains/evm/listener/event-handler.go

// Package mock_listener is a generated GoMock package.
package mock_listener

import (
	context "context"
	big "math/big"
	reflect "reflect"

	events "github.com/ChainSafe/chainbridge-core/chains/evm/calls/events"
	message "github.com/ChainSafe/chainbridge-core/relayer/message"
	types "github.com/ChainSafe/chainbridge-core/types"
	events0 "github.com/ChainSafe/sygma-relayer/chains/evm/calls/events"
	common "github.com/ethereum/go-ethereum/common"
	types0 "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
)

// MockEventListener is a mock of EventListener interface.
type MockEventListener struct {
	ctrl     *gomock.Controller
	recorder *MockEventListenerMockRecorder
}

// MockEventListenerMockRecorder is the mock recorder for MockEventListener.
type MockEventListenerMockRecorder struct {
	mock *MockEventListener
}

// NewMockEventListener creates a new mock instance.
func NewMockEventListener(ctrl *gomock.Controller) *MockEventListener {
	mock := &MockEventListener{ctrl: ctrl}
	mock.recorder = &MockEventListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventListener) EXPECT() *MockEventListenerMockRecorder {
	return m.recorder
}

// FetchDepositEvent mocks base method.
func (m *MockEventListener) FetchDepositEvent(event events0.RetryEvent, bridgeAddress common.Address, blockConfirmations *big.Int) ([]events.Deposit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDepositEvent", event, bridgeAddress, blockConfirmations)
	ret0, _ := ret[0].([]events.Deposit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDepositEvent indicates an expected call of FetchDepositEvent.
func (mr *MockEventListenerMockRecorder) FetchDepositEvent(event, bridgeAddress, blockConfirmations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDepositEvent", reflect.TypeOf((*MockEventListener)(nil).FetchDepositEvent), event, bridgeAddress, blockConfirmations)
}

// FetchKeygenEvents mocks base method.
func (m *MockEventListener) FetchKeygenEvents(ctx context.Context, address common.Address, startBlock, endBlock *big.Int) ([]types0.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchKeygenEvents", ctx, address, startBlock, endBlock)
	ret0, _ := ret[0].([]types0.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchKeygenEvents indicates an expected call of FetchKeygenEvents.
func (mr *MockEventListenerMockRecorder) FetchKeygenEvents(ctx, address, startBlock, endBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchKeygenEvents", reflect.TypeOf((*MockEventListener)(nil).FetchKeygenEvents), ctx, address, startBlock, endBlock)
}

// FetchRefreshEvents mocks base method.
func (m *MockEventListener) FetchRefreshEvents(ctx context.Context, address common.Address, startBlock, endBlock *big.Int) ([]*events0.Refresh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRefreshEvents", ctx, address, startBlock, endBlock)
	ret0, _ := ret[0].([]*events0.Refresh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRefreshEvents indicates an expected call of FetchRefreshEvents.
func (mr *MockEventListenerMockRecorder) FetchRefreshEvents(ctx, address, startBlock, endBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRefreshEvents", reflect.TypeOf((*MockEventListener)(nil).FetchRefreshEvents), ctx, address, startBlock, endBlock)
}

// FetchRetryEvents mocks base method.
func (m *MockEventListener) FetchRetryEvents(ctx context.Context, contractAddress common.Address, startBlock, endBlock *big.Int) ([]events0.RetryEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRetryEvents", ctx, contractAddress, startBlock, endBlock)
	ret0, _ := ret[0].([]events0.RetryEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRetryEvents indicates an expected call of FetchRetryEvents.
func (mr *MockEventListenerMockRecorder) FetchRetryEvents(ctx, contractAddress, startBlock, endBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRetryEvents", reflect.TypeOf((*MockEventListener)(nil).FetchRetryEvents), ctx, contractAddress, startBlock, endBlock)
}

// MockDepositListener is a mock of DepositListener interface.
type MockDepositListener struct {
	ctrl     *gomock.Controller
	recorder *MockDepositListenerMockRecorder
}

// MockDepositListenerMockRecorder is the mock recorder for MockDepositListener.
type MockDepositListenerMockRecorder struct {
	mock *MockDepositListener
}

// NewMockDepositListener creates a new mock instance.
func NewMockDepositListener(ctrl *gomock.Controller) *MockDepositListener {
	mock := &MockDepositListener{ctrl: ctrl}
	mock.recorder = &MockDepositListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDepositListener) EXPECT() *MockDepositListenerMockRecorder {
	return m.recorder
}

// FetchDeposits mocks base method.
func (m *MockDepositListener) FetchDeposits(ctx context.Context, address common.Address, startBlock, endBlock *big.Int) ([]*events.Deposit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDeposits", ctx, address, startBlock, endBlock)
	ret0, _ := ret[0].([]*events.Deposit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDeposits indicates an expected call of FetchDeposits.
func (mr *MockDepositListenerMockRecorder) FetchDeposits(ctx, address, startBlock, endBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDeposits", reflect.TypeOf((*MockDepositListener)(nil).FetchDeposits), ctx, address, startBlock, endBlock)
}

// MockDepositHandler is a mock of DepositHandler interface.
type MockDepositHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDepositHandlerMockRecorder
}

// MockDepositHandlerMockRecorder is the mock recorder for MockDepositHandler.
type MockDepositHandlerMockRecorder struct {
	mock *MockDepositHandler
}

// NewMockDepositHandler creates a new mock instance.
func NewMockDepositHandler(ctrl *gomock.Controller) *MockDepositHandler {
	mock := &MockDepositHandler{ctrl: ctrl}
	mock.recorder = &MockDepositHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDepositHandler) EXPECT() *MockDepositHandlerMockRecorder {
	return m.recorder
}

// HandleDeposit mocks base method.
func (m *MockDepositHandler) HandleDeposit(sourceID, destID uint8, nonce uint64, resourceID types.ResourceID, calldata, handlerResponse []byte) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDeposit", sourceID, destID, nonce, resourceID, calldata, handlerResponse)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleDeposit indicates an expected call of HandleDeposit.
func (mr *MockDepositHandlerMockRecorder) HandleDeposit(sourceID, destID, nonce, resourceID, calldata, handlerResponse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDeposit", reflect.TypeOf((*MockDepositHandler)(nil).HandleDeposit), sourceID, destID, nonce, resourceID, calldata, handlerResponse)
}
