# The Licensed Work is (c) 2022 Sygma
# SPDX-License-Identifier: BUSL-1.1

name: sygma/deploy/stage

on:
  push:
    branches:
      - main

env:
  AWS_REGION: '${{ secrets.AWS_REGION }}'
  ENVIRONMENT: STAGE
  AWS_STAGE: '${{ secrets.AWS_ARN }}'
  REGISTRY: 'ghcr.io'
  TAG: 'latest'

jobs:
  push:
    name: push
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: checkout the source code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: login to ghcr
        id: ghcr
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: build / tag / push docker image into ghcr
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:${{ env.TAG }}


  deploy:
    needs: push
    name: deploy
    runs-on: ${{ env.OS }}
    strategy:
      matrix:
        relayer_id: [0, 1, 2, 3, 4]

    permissions:
      contents: read
      id-token: write

    steps:
      - name: checkout the source code
        uses: actions/checkout@v3
        
      - name: checkout ecs repo
        uses: actions/checkout@v3
        with:
          repository: sygmaprotocol/devops
          token: ${{ secrets.DV_PAT }}


      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_STAGE }}:role/github-actions-${{ env.ENVIRONMENT }}-chainbridge
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GithubActions

      - name: deploy task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: 'ecs/task_definition-${{ matrix.relayer_id }}_${{ env.ENVIRONMENT }}.json'
          service: 'relayer-${{ matrix.relayer_id }}-service-${{ env.ENVIRONMENT }}'
          cluster: 'relayer-${{ env.ENVIRONMENT }}'
          wait-for-service-stability: true
